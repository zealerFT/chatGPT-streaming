// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc_chat_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenaiServiceClient is the client API for OpenaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenaiServiceClient interface {
	StreamChatCompletion(ctx context.Context, in *StreamChatCompletionRequest, opts ...grpc.CallOption) (OpenaiService_StreamChatCompletionClient, error)
}

type openaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenaiServiceClient(cc grpc.ClientConnInterface) OpenaiServiceClient {
	return &openaiServiceClient{cc}
}

func (c *openaiServiceClient) StreamChatCompletion(ctx context.Context, in *StreamChatCompletionRequest, opts ...grpc.CallOption) (OpenaiService_StreamChatCompletionClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenaiService_ServiceDesc.Streams[0], "/protos.OpenaiService/StreamChatCompletion", opts...)
	if err != nil {
		return nil, err
	}
	x := &openaiServiceStreamChatCompletionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenaiService_StreamChatCompletionClient interface {
	Recv() (*StreamChatCompletionResponse, error)
	grpc.ClientStream
}

type openaiServiceStreamChatCompletionClient struct {
	grpc.ClientStream
}

func (x *openaiServiceStreamChatCompletionClient) Recv() (*StreamChatCompletionResponse, error) {
	m := new(StreamChatCompletionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenaiServiceServer is the server API for OpenaiService service.
// All implementations must embed UnimplementedOpenaiServiceServer
// for forward compatibility
type OpenaiServiceServer interface {
	StreamChatCompletion(*StreamChatCompletionRequest, OpenaiService_StreamChatCompletionServer) error
	mustEmbedUnimplementedOpenaiServiceServer()
}

// UnimplementedOpenaiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpenaiServiceServer struct {
}

func (UnimplementedOpenaiServiceServer) StreamChatCompletion(*StreamChatCompletionRequest, OpenaiService_StreamChatCompletionServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChatCompletion not implemented")
}
func (UnimplementedOpenaiServiceServer) mustEmbedUnimplementedOpenaiServiceServer() {}

// UnsafeOpenaiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenaiServiceServer will
// result in compilation errors.
type UnsafeOpenaiServiceServer interface {
	mustEmbedUnimplementedOpenaiServiceServer()
}

func RegisterOpenaiServiceServer(s grpc.ServiceRegistrar, srv OpenaiServiceServer) {
	s.RegisterService(&OpenaiService_ServiceDesc, srv)
}

func _OpenaiService_StreamChatCompletion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChatCompletionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenaiServiceServer).StreamChatCompletion(m, &openaiServiceStreamChatCompletionServer{stream})
}

type OpenaiService_StreamChatCompletionServer interface {
	Send(*StreamChatCompletionResponse) error
	grpc.ServerStream
}

type openaiServiceStreamChatCompletionServer struct {
	grpc.ServerStream
}

func (x *openaiServiceStreamChatCompletionServer) Send(m *StreamChatCompletionResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OpenaiService_ServiceDesc is the grpc.ServiceDesc for OpenaiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenaiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.OpenaiService",
	HandlerType: (*OpenaiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChatCompletion",
			Handler:       _OpenaiService_StreamChatCompletion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_chat_service.proto",
}
